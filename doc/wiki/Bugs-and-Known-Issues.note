<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Bugs-and-Known-Issues</title>
  
<text xml:space="preserve"><note-content version="0.1"><underline>Bugs-and-Known-Issues</underline>

<size:small>This is the tomboy-ng Known Issues and To-Do list for Github Wiki.  Its generated from a note in the tomboy-ng doc dir, don't edit the wiki directly.</size:small>

<size:huge><bold>Bugs</bold></size:huge>
Bug reports and feature requests should be via Github https://github.com/tomboy-notes/tomboy-ng/issues
There is some advice about DIY debugging further down this document.


<size:huge><bold>Known Issues</bold></size:huge>

<list><list-item dir="ltr"><list><list-item dir="ltr">On some  older Macs, when using the in note Find tool, a 'shadow highlight' can appear superimposed over the button bar. It does no harm, disappears when you move the mouse over the button but is unsightly. Its a know upstream problem, https://forum.lazarus.freepascal.org/index.php/topic,53055.0.html .</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">Do not set your notes directory to be on a network share.  Please keep your notes on a local disk and use the sync facility to share them with other machines (or even the same multiboot machine).</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">Qt versions do not always pick up System Colours, you need to give the app a hint what colour theme to use, see below.</list-item></list></list-item></list>


<size:huge><bold>Specific Things with a Work Around</bold></size:huge>

<size:huge><bold>QT5 versions</bold></size:huge>

<size:large><bold>Qt5 with earlier Qt5 libraries</bold></size:large>
Can be a problem on some Linux Desktops. Generally, I don't suggest Qt5 version of tomboy-ng with systems that use Qt5 earlier than 5.15. So, using Ubuntu 20.04 (Qt5 is 5.12) is a risk factor. Setting your Qt theme to 'gtk3' on those early Qt5 systems is asking for trouble. I have not tested on systems with Qt5 between 5.12 and 5.15 so your mileage may vary. By time you get to Qt5 5.15, it all just works !

<size:large><bold>Qt5 and Wayland</bold></size:large>
If you launch tomboy-ng from the console on a Wayland using system, you see a number of harmless messages coming from the Qt libraries. Just ignore them.

<size:large><bold>Dark Theme</bold></size:large>
Sometimes, QT5 apps do not pick up the Dark Theme from the operating system. You can pass the executable a --dark-theme switch but the results are not great. A much better approach is to use Qt5's theme setting capability, using <bold>QT_QPA_PLATFORMTHEME</bold> env var. Some operating systems set this for you, other require you to do it. The easist approach (on most Linux systems) is set it to your existing gtk2 or gtk3 theme, you will need to install the <bold>qt5-style-plugins</bold> package using your normal package manager, then, start tomboy-ng with the enviournment variable set to either 'gtk2' or 'gtk3'. Small section below on setting the variable.

Another approach is to install the <bold>qt5ct</bold> package from your package manager and set any colour theme you like. The qt5ct command has a nice GUI, select 'custom' and choose the theme you want. Again, you will need to set the same environment variable, this time to 'qt5ct', it tells Qt apps (including qt5ct itself) that you are using qt5ct colours but only works after you have started qt5ct and selected a color scheme.

To test it, from the command line, you might do one of (remembering that the THEME setting might be one of 'qt5ct', 'gtk2', gtk3' ) -

$&gt;   QT_QPA_PLATFORMTHEME=qt5ct tomboy-ng [enter]

$&gt;   QT_PLATFORM=xcb  QT_QPA_PLATFORMTHEME=qt5ct  tomboy-ng [enter]

<size:large><bold>Setting that Enviournment Variable</bold></size:large>
So far, we have identified two env vars we may want to set for your Qt5 app. You can set both or one or the other. And there are several ways to do so. You can mix these modes too, setting the colours in .xsessionrc so all apps look the same but setting PLATFORM to xcb only for tomboy-ng.

<bold>In .xsessionrc</bold>
Set everything, eg, make all your Qt5 app have a nice uniform look. Set that var in either /etc/environment (requires root) or, far simpler in a .xsessionrc file in your home dir.

<monospace>cd ; echo "export QT_QPA_PLATFORMTHEME=qt5ct" &gt;&gt; .xsessionrc</monospace>

And logging out and back in again.

<bold>For a Specific App</bold>
Assuming you are opening tomboy-ng from the menu system, the best place to set one or more env vars is in its desktop file. Its usually /usr/share/applications/tomboy-ng.desktop and needs root access to edit it. You will find it has a line that looks like this -

<monospace>Exec=tomboy-ng %f</monospace>

You need to make it look like this (eg) -

<monospace>Exec=QT_PLATFORM=xcb QT_PLATFORMTHEME='gtk2'  tomboy-ng  %f</monospace>

That example shows setting both vars, you can, of course, just set one or the other.

<bold>Using a script</bold>
Create a 'bin' directory in your home directory (if its not already there) and put a script like this in there -

<monospace>#!/usr/bin/bash</monospace>
<monospace>QT_QPA_PLATFORM=xcb /usr/bin/tomboy-ng %f</monospace>

Debian nicely adds ~/bin to your PATH (on next login) and the menu system will find the script before it finds the tomboy-ng binary. However, if you have tomboy-ng set to autostart, that happens before the OS fixes up you PATH and autostart will directly try to start the real binary. Solution, edit $HOME/.config/autostart/tomboy-ng.desktop to set an absolute path to the script, the Exec line like this -

<monospace>Exec=/home/YOURNAME/bin/tomboy-ng %f</monospace>
Assuming your user name is not "YOURNAME", you should substitute your real user name there.


<size:large><bold>Cancelled Bullets</bold></size:large>
When text is bulleted and then converted back to plaintext, it has a small indent that is not removable. It goes away when next the note is loaded and is not show in printed copy but is annoying! Its an upstream issue and its being worked on.

<size:large><bold>Dark Theme</bold></size:large>
GTK2 (and Qt5 using tricks mentioned above) do a clean and functional Dark Theme. Windows can pick up Dark from the OS but its not a completely satisfactory solution.

It also possible to pass a --dark-theme switch to the application on the command line and you get, sort of, a Dark Theme.  Sadly, some forms in the application are based on components that simply will not play, Settings being a good example. Sorry.


<size:large><bold>System Tray Issues</bold></size:large>
Please see https://github.com/tomboy-notes/tomboy-ng/wiki/System-Tray-on-Linux - generally only a problem for people using the Gnome Desktop

<size:large><bold>Calc separator</bold></size:large>
In the calculator, many countries use the comma instead of a period as a decimal separator. Quite difficult to fix, my apologies to people from locales where this is an issue. https://forum.lazarus.freepascal.org/index.php/topic,56305.msg418384.html#msg418384

<size:huge><bold>Long term 'maybe' stuff</bold></size:huge>
These are things I have no immediate plans to fix, but they might be addressed some time in the future if there is some demand from end users.
<list><list-item dir="ltr"><list><list-item dir="ltr">On Linux GTK2 based versions, using the Compose Key approach to entering accented characters results in a bad character also being inserted. This is a known, upstream issue,  https://bugs.freepascal.org/view.php?id=38454 . Qt5 versions do not have this problem.</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">Stop house keeping from moving viewport.</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">Restoring cursor position on note load.</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">Dark theme is less than perfect on Windows and unknown on Mac.  Windows will not let us set a dark background to button.</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">Lines starting with an '*' should be auto converted to a Bullet.</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">Tabs do not work and probably never will.</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">Revise controls, at present modelled on Tomboy, we can improve.</list-item></list></list-item></list>


<size:huge><bold>Legacy Fixes</bold></size:huge>
<bold>Notes, kept in case needed but generally do not apply anymore.</bold>

<size:large><bold>Qt and KDE Desktop Issues</bold></size:large>
On some (but not all) Wayland using Desktops, there are still a few Qt5 problems. This is particularly the case <bold>Debian KDE Bookworm</bold>. The solution is to force the app to use xcb instead of direct to Wayland. Set an environment variable, QT_PLATFORM=xcb and it all works perfectly. Test this from the command line like this

$&gt; QT_PLATFORM=xcb tomboy-ng [enter]

And if you like the result, set it permently, see Setting that Enviournment Variable

<size:large><bold>QT5 (or Qt6) versions and Gnome Desktops</bold></size:large>
It appears that even Qt5 apps can now use XWayland so much of this is unnecessary, leave it here for now, just in case.
Almost all Gnome Desktops now use the Wayland Display Manager instead of X (or XCB). QT5 has a plugin that will manage the connection between a QT5 app and Wayland, typically called qtwayland5, you may find it already installed or need to manually install it yourself.  If you run a QT5 app, such as the QT5 version of tomboy-ng, you may see a warning to the effect that its ignoring the request to run under Wayland, if you want it to run under Wayland, do something like -

QT_QPA_PLATFORM=wayland  tomboy-ng [enter]

You can do so (if you have qtwayland5 installed) but it seems to make little or no difference and does trigger a couple of warning messages from the QT libraries. So, honestly, don't worry about it.

<size:huge><bold>Debugging</bold></size:huge>
If you have problems with the application, or wish to make a feature request, please report via the github tomboy-ng issues facility.
If tomboy-ng crashes or does something unexpected, there are a number of command line switches that may reveal whats going on (to either yourself of, if posted to 'issues', the author).  Using these command line switches is easy in Linux but Windows or Mac users need to capture the information in a file, see below -

<bold>Command Line Switches</bold>

   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--dark-theme</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>-l --lang=CCode               Force Language, en, es, uk, fr, nl</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>-h --help                     Show this help message and exit.</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--version                     Print version and exit</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--no-splash                   Do not show small status/splash window</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--debug-sync                  Show debug messages during Sync</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--debug-index                 Show debug msgs while indexing notes</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--debug-spell                 Show debug messages while spell setup</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--config-dir=PATH_to_DIR      Create or use an alternative config</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--open-note=PATH_to_NOTE      Open indicated note, switch is optional</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--debug-log=SOME.LOG          Direct debug output to SOME.LOG.</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--import-txt=PATH_to_FILE     Import file into Note Repo  also -t</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--import-md=PATH_to_FILE      Import file into Note Repo  also -m</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--import-note=PATH_to_NOTE    Import file into Note Repo  also -n</monospace></list-item></list></list-item></list>
   <list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--title-fname                 Use Filename as title for import txt &amp; md</monospace></list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr"><monospace>--useappind=[yes|no]           Ctrl use of AppInd (ie TrayIcon) on Linux</monospace></list-item></list></list-item></list>

<bold>Capturing to a file</bold>
Windows and Mac do not, for this purpose, have a console. But they too  can be told to capture this log info to a file using  another  command  line  switch or by setting an env variable that specifies a file name. Please ensure you have permission to write to the location specified. For example a linux user would  -

       set tomboy-ng_debuglog=c:\%userprofile%\debug.txt

<bold>Mac</bold> users can do something similar from a terminal :

       open /Applications/tomboy-ng.app --args     "--debug-log=$HOME/tomboy-ng.log"  "--debug-sync"

       Linux users who need a debug log file can also :

       tomboy-ng --debug-sync --debug-log=$HOME/tomboy-ng.log

<bold>Windows</bold> users should do something like this -

<list><list-item dir="ltr"><list><list-item dir="ltr">Right click the startbutton and select "run".  In the field, enter this command line exactly as show (including the inverted commas) -</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">"C:\Program Files\tomboy-ng\tomboy-ng.exe" --debug-index --debug-log=%userprofile%\Desktop\tomboy-log.txt</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">Press enter, tomboy-ng should start up normally. Close it.</list-item></list></list-item></list>
<list><list-item dir="ltr"><list><list-item dir="ltr">A file called tomboy-log.txt will have been created on your desktop.</list-item></list></list-item></list>

In all cases, you may need to zip that file up to post it on Github. If  you  do intend to post such a log file to (eg) the Tomboy help system, do please check through it first to ensure there is nothing there you don't want the world to see. It may include things like note Titles for example. Note that a debug file will capture very little data unless of the debug switches is also set.




</note-content></text>
  <last-change-date>2023-12-22T09:25:50.9279222+11:00</last-change-date>
  <last-metadata-change-date>2023-12-22T09:25:50.9279222+11:00</last-metadata-change-date>
  <create-date>2018-06-23T12:35:30.7960000+10:00</create-date>
  <cursor-position>1</cursor-position>
  <selection-bound-position>1</selection-bound-position>
  <width>1211</width>
  <height>626</height>
  <x>137</x>
  <y>230</y>
  <open-on-startup>False</open-on-startup>
</note>
