#!/bin/bash
set -e

# copyright David Bannon, 2019, 2020, use as you see fit, but retain this statement.
# This stript is useful to prepare the tomboy-ng source tree to make an
# Ubuntu PPA

# For detailed instructions including ready to copy command lines see-
# https://github.com/tomboy-notes/tomboy-ng/blob/master/prepare.md





# Remember that we don't build a Qt5 for Bionic, its libqt5pas is too old.
# So, -Dbionic   and  -Q -Dfocal

# David Bannon, July 2020
# History -
#	2020-09-02 Added -D distro switch
#       2020-12-17 Restructed the multi control system to make it clearer.
#       2021-02-23 Allow for fact that we keep changelog (for Debian).
#                  Remove some Debian specific things
#       2021-06-19 cleanup and move how to doc to github
#       2021-11-12 Now update changelog with whatsnew contents
#       2022-10-03 Now build for Focal only, 'copy' gtk2 to bionic

# ---------------------------------------------------------

APP="tomboy-ng"
# These are mine, they are used as defaults if NOT set in env. Ignored unless signing.
DEF_EMAIL="tomboy-ng@bannons.id.au"	# This matches cert I use to sign tomboy-ng stuff
DEF_FULLNAME="David Bannon"		# 
# UBUNTU_FULLNAME="tomboy-ng"		# My stuff up, different cert with different name in Ubuntu PPA !

# Housekeeping stuff, helpers for debugging etc. Set with command line, not here !
VER="unknown"
LAZ_BLD=""
UFILES="NO"	# debug tool, update Makefile
CLEAN="NO"	# debug tool, remove files from previous run.
WIDGET=""	# empty says make a GTK2, only other possibility is Qt5
QT5INNAME=""	# May have content we add to qt5 package name (when -Q) 
PACKVER="-1"    # -1 is normal, if you have to submit again, must inc.

	# Looks for fpc and lazbuild on PATH, if in root space, do nothing,
	# if in user space, because debuild will miss them, makes two files.
function CheckFPC_LAZ () {
	FPC=`which fpc`
	if [ -x "$FPC" ]; then
		PREFIX="${FPC:0:4}"
		if [ "$PREFIX" = "/usr" ]; then
			echo "---------- root space fpc, all good"
		else
			echo "---------- Leaving a fpc file for buildit"
			echo "$FPC" > WHICHFPC
		fi
	else
		echo "----------- ERROR, no fpc found ------------"
		exit 1
	fi
	if [ "$LAZ_BLD" = "" ]; then 	# we had better try to find it		
		LAZ_BLD=`which lazbuild`
	fi
	if [ -x "$LAZ_BLD" ]; then
		PREFIX="${LAZ_BLD:0:4}"
		if [ "$PREFIX" = "/usr" ]; then
			echo "---------- root space Lazarus, all good"
		else
			echo "---------- Leaving a lazbuild file for buildit"
			echo "$LAZ_BLD" > WHICHLAZ
		fi
	else
		echo " --- ERROR, no lazbuild found, try -l ? ---"
		exit 1
	fi
}

	# Here we remove file that are not needed in the Debian SRC kit.
function CleanSource () {
	rm -Rf experimental
	rm -Rf patches
	rm -Rf doc/gallery
	rm -Rf doc/html
	rm -Rf doc/wiki
	rm -Rf po/*.mo
	rm -f  doc/*.svg doc/*.png doc/*.note
	rm -f  glyphs/*.png glyphs/*.ico glyphs/*.svg glyphs/*.icns
	rm -fR glyphs/help
	rm -fR glyphs/demos
	KC="kcontrols"
	KCS="$KC/source"
	rm -fR "$KC"/demos 
	rm -fR "$KC"/help
	rm -Rf "$KC"/packages kcontrols/tools 
	rm -Rf "$KC"/resource_src/khexeditor_icons "$KC"/resource_src/kgrid_icons
	rm "$KCS"/kbuttons.pas "$KCS"/kdbgrids.pas "$KCS"/kgrids.* "$KCS"/kicon.pas 
	rm "$KCS"/klabels.pas "$KCS"/kmemodlg*.* "$KCS"/kxml.pas "$KCS"/kwidewinprocs.pas
	rm "$KCS"/kmemofrm.* "$KCS"/kpagecontrol.* "$KCS"/kprogress.* "$KCS"/ksplitter.pas  
	rm "$KC"/*.txt "$KC"/*.json "$KC"/*.bat
	rm -Rf "$KC"/packages "$KC"/tools "$KC"/resource_src/khexeditor_icons "$KC"/resource_src/kgrid_icons
}


function KControls () {	
	if [ -e "master.zip" ]; then
		echo "Note: reusing KControls zip"
	else
		# wget https://github.com/kryslt/KControls/archive/master.zip   # watch this name does not change.
		wget https://github.com/davidbannon/KControls/archive/master.zip   # watch this name does not change.
	fi
	unzip -q master.zip
	# rm -f master.zip
	mv KControls-master "$APP"_"$VER""$PACKVER"/kcontrols
}

function ShowHelp () {
    echo " "
    echo "Use this script to make Ubuntu PPA (or plain binary), always make .orig"
    echo "Assumes FPC 3.2.0 in path. Will no longer build with FPC304."
    echo "Needs Lazarus, <=2.0.10 in root space or specified with -l option."
    echo "Needs devscripts preinstalled and maybe an edit of email address above if"
    echo "it is to be used in the DEB SRC tool chain. Its role there is just to create"
    echo "an initial tarball and working directory (including inserting kcontrols)."
    echo "David Bannon, December 2020" 
    echo "-h   print help message"
    echo "-l   a full path to a viable lazbuild executable, eg also lcl dir is."
    echo "-C   clean out deb files from previous run, debug use only."
    echo "-U   update Makefile and/or buildit.bash,   debug use only."
    echo "-Q   Make a Qt5 version instead of default GTK2"
    #echo "-q   Make a Qt5 one for a Debian Repo" 
    echo "-p   Pause before creating .orig. to change content, use another term."
    echo "-D   distro, eg bionic, focal"
    echo ""
    echo "eg  bash ./prepare.bash -Dbionic [-Q] <enter>;  cd tomboy[tab] <enter>"
    echo "    debuild -S <enter>     // check for errors !" 
    echo "    cd .. <enter>; dput ppa:d-bannon/ppa-tomboy-ng *.changes [enter]"
    echo " ----- or, just build a binary ---------"
    echo "eg  bash ./prepare.bash -Dbionic [-Q] <enter>;  cd tomboy[tab] <enter>"
    echo "    bash ./buildit.bash <enter>"
    exit
}


while getopts "hpQUCl:D:" opt; do
  case $opt in
    h)
      ShowHelp
      ;;
    l)
	LAZ_BLD="$OPTARG"
	;;
    U)
	UFILES="YES"
	;;
    C)
	CLEAN="YES"
	;;
    p)
	PAUSE="YES"
	;;
    Q)
	WIDGET="Qt5"
	APP="$APP""-qt5"
#	QT5INNAME="YES"
	;;
    D)
    	DISTRO1="$OPTARG"
	# DISTRO1="-D""$OPTARG"
	DISTRO2="--force-distribution"
	;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ShowHelp
      ;;
  esac
done

echo "---------- laz_bld is $LAZ_BLD"
echo "---------- CLEAN is $CLEAN"
echo "---------- UFILES is $UFILES"

rm -f WHICHFPC WHICHLAZ	
	
if [ ! -f tomboy-ng-master.zip ]; then
	echo "---------- Downloading a new tomboy-ng"
	wget https://github.com/tomboy-notes/tomboy-ng/archive/master.zip
	mv master.zip tomboy-ng-master.zip
fi

if [ -f tomboy-ng-master.zip ]; then
	CheckFPC_LAZ
	# In practise, we should have these env set, my defaults just in case. 
	if [ "$DEBEMAIL" = "" ]; then
		DEBEMAIL="$DEF_EMAIL"
		export DEBEMAIL
	fi
	if [ "$DEBFULLNAME" = "" ]; then
		DEBFULLNAME="$UBUNTU_FULLNAME"
		export DEBFULLNAME
	fi
	unzip -q tomboy-ng-master.zip
	if [ "$UFILES" = "YES" ]; then
		if [ "Makefile" -nt "tomboy-ng-master/Makefile" ]; then
			echo "---------- UPDATING Makefile"
			cp Makefile tomboy-ng-master/Makefile
		fi
		if [ "buildit.bash" -nt "tomboy-ng-master/buildit.bash" ]; then
			echo "---------- UPDATING buildit.bash"
			cp buildit.bash tomboy-ng-master/buildit.bash
		fi
	fi
	VER=`cat tomboy-ng-master/package/version`
	if [ "$CLEAN" = "YES" ]; then
		echo "---------- Removing existing DEB files"
		rm -Rf "$APP"_"$VER""$PACKVER"
		rm -f *.changes *.buildinfo *.orig.tar.gz *.dsc *.tar.gz *.tar.xz *.upload
	fi
	mv "tomboy-ng-master" "$APP"_"$VER""$PACKVER"

	KControls
	cd "$APP"_"$VER""$PACKVER"
	CleanSource

	# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=897688
	# dch "$DISTRO1" "$DISTRO2" --create --package="$APP" --newversion="$VER""$PACKVER" "Initial release. (Closes: #897688)"
    # because we use the same changelog, we need to tweak the qt5 one
    if [ "$WIDGET" = "Qt5" ]; then
        sed -i 's/tomboy-ng\ /tomboy-ng-qt5\ /g' debian/changelog
    fi
    dch -v "$VER""$PACKVER" -D"$DISTRO1" "$DISTRO2" "Release of new version"
    if [ -f whatsnew ]; then
        echo "---------- Including whatsnew in changelog"
        while IFS= read -r Line; do
        dch --append "$Line"
        done < whatsnew
    fi
	dch --append "Please see github for details"
	if [ "$WIDGET" = "Qt5" ]; then
		dch --append "Qt5 version"
		cp debian/rules.qt5 debian/rules
		# cp debian/control.qt5 debian/control
		# sed  "s/#REPLACEME_QT5/DESTDIR += -qt5/" Makefile > Makefile.temp
		# mv Makefile.temp Makefile
		../mkcontrol.bash debian/ "$DISTRO1" qt5
		touch Qt5
	else
		../mkcontrol.bash debian/ "$DISTRO1"
	fi
	rm debian/control.template
	dch --release "blar"
	cd ..
	if [ "$PAUSE" = "YES" ]; then
		read -p "Edit things in another term, press Enter."
	fi
	# Next block is to avoid the dreaded lintian no-debian-changes
	# The copyright file in there alone does not generate that error
	mv "$APP"_"$VER""$PACKVER"/debian ./debian                    # tuck a copy away for later
	mkdir "$APP"_"$VER""$PACKVER"/debian
	cp debian/copyright "$APP"_"$VER""$PACKVER"/debian/.          # we must have copyright
	tar czf "$APP"_"$VER".orig.tar.gz "$APP"_"$VER""$PACKVER"     # create the orig file
	# OK, we have our .orig. file, put most of it back.
	rm -Rf "$APP"_"$VER""$PACKVER"/debian                         # dump that one for simplicity
	rm debian/control.qt5-DEBIAN debian/control.qt5         # we don't need that
	rm debian/rules.qt5                                     # or that
	mv ./debian "$APP"_"$VER""$PACKVER"/.                         # put remainder back where it belongs

	echo "If no errrors, you should now cd ""$APP"_"$VER""$PACKVER; debuild -S"
else
	echo ""
	echo "   Sorry, I cannot see or get a tomboy-ng-master.zip file. This script can"
	echo "   be run in a directory containing that file or will try to download it"
	echo "   from github, seems even that failed."
	echo "   If you used wget to download tomboy-ng, it will be named master.zip,"
	echo "   you should rename it tomboy-ng-master.zip to avoid confusion."
	echo ""
fi



